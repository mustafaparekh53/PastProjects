{"version":3,"sources":["../../src/webparts/contractForm/components/FileUpload/CpsFileUpload.tsx"],"names":[],"mappings":"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","file":"webparts/contractForm/components/FileUpload/CpsFileUpload.js","sourcesContent":["import { ICpsFileUploadProps } from \"./ICpsFileUploadProps\";\r\nimport React = require(\"react\");\r\nimport { FileUpload } from \"./FileUpload\";\r\nimport { IFileState } from \"./IFileState\";\r\nimport { sp, Item } from \"@pnp/sp\";\r\nimport \"@pnp/polyfill-ie11\";\r\nimport * as stylesImport from \"./FileUpload.module.scss\";\r\nimport { WebConfig } from \"../../../ComComponents/webconfig\";\r\nimport { GetFileRandName } from \"../../../ComComponents/comutil\";\r\n\r\nexport class CpsFileUpload extends React.Component<\r\n  ICpsFileUploadProps,\r\n  IFileState\r\n> {\r\n  constructor(props: ICpsFileUploadProps) {\r\n    super(props);\r\n    if (props.doUpload === undefined) {\r\n      props.doUpload = this.doUpload;\r\n    }\r\n    this.state = {\r\n      file: null,\r\n      ContractItemId: this.props.docid,\r\n      errMsg: this.props.errMsg\r\n    };\r\n  }\r\n\r\n  private readUploadedFileAsBuffer: (\r\n    inputFile: File\r\n  ) => Promise<ArrayBuffer> = (inputFile: File) => {\r\n    const temporaryFileReader: FileReader = new FileReader();\r\n    return new Promise((resolve, reject) => {\r\n      temporaryFileReader.onerror = ev => {\r\n        temporaryFileReader.abort();\r\n        reject(ev);\r\n        // reject(new DOMException(\"Problem parsing input file.\"));\r\n      };\r\n      temporaryFileReader.onload = () => {\r\n        resolve(temporaryFileReader.result as ArrayBuffer);\r\n      };\r\n      temporaryFileReader.readAsArrayBuffer(inputFile);\r\n    });\r\n  };\r\n  public render(): JSX.Element {\r\n    //  console.log(this.props);\r\n    return (\r\n      <FileUpload options={this.props}>\r\n        {this.state.errMsg && this.state.errMsg.length > 1 ? (\r\n          <div>\r\n            <span className=\"errmMessage\">{this.state.errMsg}</span>\r\n          </div>\r\n        ) : null}\r\n        {this.props.Enable && !this.props.AutoUpload ? (\r\n          <button ref=\"uploadBtn\">上传</button>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </FileUpload>\r\n    );\r\n  }\r\n  public componentWillReceiveProps(newProps: ICpsFileUploadProps): void {\r\n    this.setState({ errMsg: newProps.errMsg });\r\n  }\r\n  private doUpload(files: File[], mill: any): void {\r\n    // in case of multiple files,iterate or else upload the first file.\r\n    let file: File = files[0];\r\n    if (file !== undefined || file !== null) {\r\n      let item: Item = sp.web.lists\r\n        .getByTitle(WebConfig.requestedItemsListName)\r\n        .items.getById(this.state.ContractItemId);\r\n\r\n      const fileReader: FileReader = new FileReader();\r\n\r\n      fileReader.onloadend = (event: Event) => {\r\n        let data: any = fileReader.result;\r\n        let newfileName: string = GetFileRandName(file.name);\r\n        item.attachmentFiles.add(newfileName, data).then(v => {\r\n          console.log(v);\r\n        });\r\n      };\r\n\r\n      fileReader.readAsArrayBuffer(file);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}